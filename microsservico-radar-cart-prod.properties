# Configuração do Servidor para o contêiner
server.port=8085

# Configurações do Actuator
management.endpoints.web.exposure.include=*
management.metrics.tags.application=microservice-radar-cart

# ==========================================================
# ##            CONFIGURAÇÃO DO BANCO POSTGRESQL            ##
# ==========================================================
# Aponta para o serviço 'postgres-db' que definiremos no Docker Compose
spring.datasource.url=jdbc:postgresql://postgres-db:5432/cart_db
spring.datasource.username=${POSTGRES_USER}
spring.datasource.password=${POSTGRES_PASSWORD}
spring.datasource.driverClassName=org.postgresql.Driver
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect
# Em produção real, o ideal é usar ferramentas de migração como Flyway ou Liquibase
spring.jpa.hibernate.ddl-auto=update

# ==========================================================
# ##            CONFIGURAÇÕES DO RABBITMQ                 ##
# ==========================================================
# Aponta para o serviço 'rabbitmq' no Docker Compose
spring.rabbitmq.host=rabbitmq
spring.rabbitmq.port=5672
spring.rabbitmq.username=${RABBITMQ_USER}
spring.rabbitmq.password=${RABBITMQ_PASSWORD}

# RabbitMQ Producer Configuration
rabbitmq.exchange.name=radares_exchange
rabbitmq.routing.key=radares.cart